searchState.loadedDescShard("mg", 0, "A library for programmatically generating 3D models …\nContains the error value\nError types for the model-generator library.\nThe core data structure representing a 3D model.\nContains the success value\nResult type for operations in the model-generator library.\nTrait for implementing transformations that can be applied …\nApply the transformation to the given model.\nApply a transformation to this model.\nExport the model to glTF format.\nExport the model to OBJ format.\nExport the model to STL format.\nFile format exporters for 3D models.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe main mesh containing geometry data\nName of the model\nCreate a new empty model.\nPlugin system for extending model-generator functionality.\nPrimitive 3D shapes that can be used as building blocks.\nTransformations that can be applied to 3D models.\nCore geometric types for the model-generator library.\nglTF file format exporter.\nOBJ file format exporter.\nSTL file format exporter.\nExport a model to glTF format.\nExport a model to OBJ format.\nExport a model to STL format.\nA plugin that applies a sequence of transforms.\nA plugin that can modify a model.\nRegistry for managing plugins.\nA basic plugin for smoothing vertex normals.\nA transform plugin that wraps a Transform implementation.\nAdd a plugin to the sequence.\nAdd an existing plugin to the sequence.\nDescription of the plugin.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a plugin by name.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList all registered plugins.\nName of the plugin.\nCreate a new transform plugin.\nCreate a new composite plugin.\nCreate a new smooth normals plugin.\nCreate a new empty plugin registry.\nProcess a model using this plugin.\nRegister a plugin with the registry.\nBuilder for creating a cube primitive.\nBuilder for creating a cylinder primitive.\nBuilder for creating a sphere primitive.\nBuild the cube model.\nBuild the sphere model.\nBuild the cylinder model.\nSet whether to generate end caps.\nSet the center position of the cube.\nSet the center position of the sphere.\nSet the center position of the cylinder.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSet the height of the cylinder.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new cube builder with default settings.\nCreate a new sphere builder with default settings.\nCreate a new cylinder builder with default settings.\nSet the radius of the sphere.\nSet the radius of the cylinder.\nSet the number of vertical rings (latitude).\nSet the number of horizontal segments (longitude).\nSet the number of segments around the circumference.\nSet the size of the cube.\nSet whether to generate texture coordinates.\nAdvanced transformations for 3D models.\nBasic transformations for 3D models.\nDeformation transformations for 3D models.\nProjection transformations for 3D models.\nApplies a general 4x4 transformation matrix to a model.\nApplies a mirror reflection to a model.\nApplies a quaternion-based rotation to a model.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a quaternion rotation from axis-angle …\nCreate a quaternion that represents the shortest rotation …\nCreate a quaternion from Euler angles (in degrees).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new matrix transformation.\nCreate a new mirroring transformation.\nCreate a new quaternion transformation from a unit …\nMirror across the YZ plane.\nMirror across the XZ plane.\nMirror across the XY plane.\nRotates a model around an axis.\nScales a model uniformly or non-uniformly.\nTranslates a model in 3D space.\nRotate around the X axis.\nRotate around the Y axis.\nRotate around the Z axis.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new rotation transformation.\nCreate a new scaling transformation.\nCreate a new translation transformation.\nCreate a uniform scaling transformation.\nApplies a bend deformation along an axis.\nApplies a tapering deformation along an axis.\nApplies a twist deformation around an axis.\nCreate a twist around the X axis.\nCreate a twist around the Y axis.\nCreate a twist around the Z axis.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new bend transformation.\nCreate a new tapering transformation.\nCreate a new twist transformation.\nCreate a bend around the X axis, with Y as the direction …\nCreate a taper along the X axis.\nCreate a bend around the Y axis, with X as the direction …\nCreate a taper along the Y axis.\nCreate a bend around the Z axis, with X as the direction …\nCreate a taper along the Z axis.\nApplies a cylindrical projection to a model.\nApplies an orthographic projection to a model.\nApplies a perspective projection to a model.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new cylindrical projection transformation.\nCreate a new orthographic projection transformation.\nCreate a new perspective projection transformation.\nCreate an orthographic projection onto the XY plane.\nCreate an orthographic projection onto the XZ plane.\nCreate an orthographic projection onto the YZ plane.\nCreate a cylindrical projection along the X axis.\nCreate a cylindrical projection along the Y axis.\nCreate a cylindrical projection along the Z axis.\nCreate a perspective projection looking along the negative …\nCreate a perspective projection looking along the positive …\nDiffuse color map\nEmission map\nA face consisting of vertex indices.\nMaterial properties for a mesh.\nA mesh consisting of vertices and faces.\nMetallic map\nNormal map\nOcclusion map\nRoughness map\nSpecular map\nTypes of textures that can be used in materials.\nA 3D vertex with position, normal, and texture coordinates.\nAdd a face to the mesh.\nAdd a vertex to the mesh.\nAmbient color (RGBA)\nCompute surface normals for vertices by averaging face …\nDiffuse color (RGBA)\nMaterial assignments for faces\nFaces in the mesh\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndices of vertices that form the face\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaterial properties\nMaterial name\nCreate a new vertex with position, normal, and optional …\nCreate a new face from vertex indices.\nCreate a new empty mesh.\nCreate a new basic material.\nSurface normal\n3D position\nCreate a quad face.\nShininess\nSpecular color (RGBA)\nTexture coordinates (u, v)\nTexture file paths\nCreate a triangle face.\nVertices in the mesh\nCreate a new vertex with only position data.")